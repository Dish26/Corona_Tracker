{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Card/Card.jsx","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Cards/Card/Card.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/image (1).png"],"names":["module","exports","CardComponent","className","cardTitle","value","lastUpdate","cardSubtitle","Grid","item","xs","md","component","Card","cx","styles","card","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","Info","data","confirmed","recovered","deaths","container","spacing","justify","infected","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","map","date","reportDate","total","fetchCountries","countries","name","Chart","useState","dailyData","setDailyData","useEffect","initialDailyData","fetchMyAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","length","borderColor","fill","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","fetchAPI","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","console","log","this","image","src","coronaImage","alt","Cards","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.33ca730f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1qwxa\",\"card\":\"Cards_card__1Rr9I\",\"infected\":\"Cards_infected__2zVK2\",\"recovered\":\"Cards_recovered__2J4z1\",\"deaths\":\"Cards_deaths__Z1FwG\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Card.module.css';\r\n\r\nconst CardComponent = ({ className, cardTitle, value, lastUpdate, cardSubtitle }) => (\r\n  <Grid item xs={12} md={3} component={Card} className={cx(styles.card, className)}>\r\n    <CardContent>\r\n      <Typography color=\"textSecondary\" gutterBottom>\r\n        {cardTitle}\r\n      </Typography>\r\n      <Typography variant=\"h5\" component=\"h2\">\r\n        <CountUp start={0} end={value} duration={2.75} separator=\",\" />\r\n      </Typography>\r\n      <Typography color=\"textSecondary\">\r\n        {new Date(lastUpdate).toDateString()}\r\n      </Typography>\r\n      <Typography variant=\"body2\" component=\"p\">\r\n        {cardSubtitle}\r\n      </Typography>\r\n    </CardContent>\r\n  </Grid>\r\n);\r\n\r\nexport default CardComponent;","/* import React from 'react';\r\nimport {Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ({ data : {confirmed , recovered, deaths, lastUpdate }}) => {\r\n    if(!confirmed ){\r\n        return ( <h3>Loading...! </h3>);\r\n    }\r\n    return(\r\n      <div className={styles.container}>\r\n      <Grid container spacing = {3} justify =\"center\">\r\n        <Grid item component = {Card} xs ={12} md ={3} className={cx(styles.card, styles.infected)}>\r\n          <CardContent> \r\n            <Typography color ='textSecondary' gutterBottom> Infected </Typography>\r\n            <Typography variant = \"h5\"> {confirmed.value}\r\n            <CountUp  start={0} end={confirmed.value} duration={2.5}  />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\"> { new Date (lastUpdate).toDateString()} </Typography>\r\n            <Typography varaint =\"body2\"> No of total Covid-19 confirmed</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid item component = {Card} xs ={12} md ={3} className={cx(styles.card, styles.recovered)}>\r\n        <CardContent> \r\n          <Typography color ='textSecondary' gutterBottom> Recovered </Typography>\r\n          <Typography variant = \"h5\"> {recovered.value}\r\n          <CountUp  start={0} end={confirmed.value} duration={2.5}  />\r\n           </Typography>\r\n          <Typography color=\"textSecondary\"> { new Date (lastUpdate).toDateString()} </Typography>\r\n          <Typography varaint =\"body2\"> No of recovered Covid-19 confirmed</Typography>\r\n        </CardContent>\r\n      </Grid>\r\n      <Grid item component = {Card} xs ={12} md ={3} className={cx(styles.card, styles.deaths)}>\r\n      <CardContent> \r\n        <Typography color ='textSecondary' gutterBottom> Deaths </Typography>\r\n        <Typography variant = \"h5\"> {deaths.value}\r\n        <CountUp  start={0} end={confirmed.value} duration={2.5}  />\r\n         </Typography>\r\n        <Typography color=\"textSecondary\"> { new Date (lastUpdate).toDateString()}</Typography>\r\n        <Typography varaint =\"body2\"> No of deaths from Covid-19</Typography>\r\n      </CardContent>\r\n    </Grid>\r\n       </Grid>\r\n      <h1>Cards</h1>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Cards;  */\r\nimport React from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport CardComponent from './Card/Card';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nconst Info = ({ data: { confirmed, recovered, deaths, lastUpdate } }) => {\r\n  if (!confirmed) {\r\n    return 'Loading...';\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <CardComponent\r\n          className={styles.infected}\r\n          cardTitle=\"Infected\"\r\n          value={confirmed.value}\r\n          lastUpdate={lastUpdate}\r\n          cardSubtitle=\"Number of active cases from COVID-19.\"\r\n        />\r\n        <CardComponent\r\n          className={styles.recovered}\r\n          cardTitle=\"Recovered\"\r\n          value={recovered.value}\r\n          lastUpdate={lastUpdate}\r\n          cardSubtitle=\"Number of recoveries from COVID-19.\"\r\n        />\r\n        <CardComponent\r\n          className={styles.deaths}\r\n          cardTitle=\"Deaths\"\r\n          value={deaths.value}\r\n          lastUpdate={lastUpdate}\r\n          cardSubtitle=\"Number of deaths caused by COVID-19.\"\r\n        />\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\nexport default Info;","// here will create functns which will fetch data that we'll need\r\n\r\n/* import axios from 'axios';\r\n\r\nconst url ='https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async(country) => {\r\n    let changeableUrl = url;\r\n    if(country){\r\n        //will build the url here\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    } \r\n\r\n    //here we'll have an asynchronous fntn\r\n try {\r\n    const {data} = await axios.get(changeableUrl);\r\n\r\n    const modifiedData = {\r\n        confirmed :  data.confirmed ,\r\n        recovered:  data.recovered,\r\n        deaths:  data.deaths,\r\n        lastUpdate: data.lastUpdate\r\n    }\r\n    //console.log(response);\r\n    return modifiedData;\r\n }\r\n catch(error) {\r\n }\r\n}\r\n\r\nexport const fetchDailyData = async ()=>{\r\n    try{\r\n        const {data} = await axios.get(`${url}/daily`);\r\n\r\n        const modifiedData = data.map((dailyData) => ({\r\n             confirmed : dailyData.confirmed.total,\r\n             deaths: dailyData.deaths.total,\r\n             date: dailyData.reportDate  \r\n        }));\r\n\r\n        return modifiedData;\r\n    }\r\n    catch(error){\r\n       console.log(error)\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async() => {\r\n    try{\r\n      const {data:{countries}} = await axios.get(`${url}/countries`)\r\n     // console.log(response);\r\n      return countries.map((country) => country.name);\r\n    }\r\n    catch(error){\r\n      console.log(error)\r\n    }\r\n}  */\r\n\r\nimport axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url}/countries/${country}`;\r\n  }\r\n\r\n  try {\r\n    const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n\r\n    return { confirmed, recovered, deaths, lastUpdate };\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n\r\n    return data.map(({ confirmed, deaths, reportDate: date }) => ({ confirmed: confirmed.total, deaths: deaths.total, date }));\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const { data: { countries } } = await axios.get(`${url}/countries`);\r\n\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};","/*\r\nimport React, {useState, useEffect} from 'react';\r\nimport {fetchDailyData} from '../../api';\r\nimport {Line, Bar} from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data: { confirmed , recovered, deaths }, country }) => {\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n    const fetchAPI= async() => {\r\n        setDailyData( await fetchDailyData());\r\n      }\r\n      //calling the fetcAPI fntn below\r\n      fetchAPI();\r\n    }, []);\r\n\r\n // responsible for the global showing of the data\r\n    const lineChart = (\r\n        dailyData.length  ? \r\n     ( <Line  data={{\r\n         //labels and dataSets need to be an array \r\n         //this is a map n returns an array of all the dates\r\n       labels: dailyData.map(({date}) => date),\r\n       dataSets: [{\r\n           data: dailyData.map(({confirmed }) => confirmed ),\r\n           label: 'Infected',\r\n           borderColor: 'grey',\r\n           //fill the space below the chart\r\n           fill: true,\r\n        \r\n       }, {\r\n        data: dailyData.map(({deaths}) => deaths),\r\n        label: 'Deaths',\r\n        borderColor: 'red',\r\n        backgroundColor: 'rgba(255, 0, 0, 0.7)',\r\n        //fill the space below the chart\r\n        fill: true,\r\n       }],\r\n\r\n      }}\r\n      />) : null\r\n    )\r\n\r\n    const barChart =(\r\n        confirmed \r\n        ? (\r\n            //2 braces in data, 1 for making the code dynamic, 2 to open an object\r\n            <Bar\r\n            data={{\r\n             labels: ['Infected', 'Recovered', 'Deaths'],\r\n             dataSets: [{\r\n                label: 'People',\r\n                backgroundColor: ['rgba(0, 0, 0, 255, 0.7)', 'rgba(0, 255, 0, 0.7)', 'rgba(255, 0, 0, 0.7)' ],\r\n                data: [confirmed .value, recovered.value, deaths.value]\r\n            }]\r\n            }}\r\n            options={{\r\n                legend: {display: false},\r\n                title: {display: true, text: `Current state in ${country}`}\r\n            }}\r\n            />\r\n        ) : null\r\n    )\r\n\r\n    return(\r\n      <div className={styles.container}>\r\n      {country ? barChart : lineChart}\r\n      </div>   \r\n    )\r\n}\r\n\r\nexport default Chart; */\r\n\r\n\r\n  \r\nimport React, { useState, useEffect } from 'react';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport { fetchDailyData } from '../../api';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({ data: { confirmed , recovered, deaths }, country }) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchMyAPI = async () => {\r\n      const initialDailyData = await fetchDailyData();\r\n\r\n      setDailyData(initialDailyData);\r\n    };\r\n\r\n    fetchMyAPI();\r\n  }, []);\r\n\r\n  const barChart = (\r\n    confirmed  ? (\r\n      <Bar\r\n        data={{\r\n          labels: ['Infected', 'Recovered', 'Deaths'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n              data: [confirmed.value, recovered.value, deaths.value],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current state in ${country}` },\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  const lineChart = (\r\n    dailyData.length ? (\r\n      <Line\r\n        data={{\r\n          labels: dailyData.map(({ date }) => date),\r\n          datasets: [{\r\n            data: dailyData.map((data) => data.confirmed ),\r\n            label: 'Infected',\r\n            borderColor: '#3333ff',\r\n            fill: true,\r\n          }, {\r\n            data: dailyData.map((data) => data.deaths),\r\n            label: 'Deaths',\r\n            borderColor: 'red',\r\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n            fill: true,\r\n          },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {country ? barChart : lineChart}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;","import React, {useState, useEffect} from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core';\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport {fetchCountries} from  '../../api';\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n    const [fetchedCountries, setFetchedCountries]\r\n        = useState([]);\r\n\r\n    useEffect (() => {\r\n       const fetchAPI = async() => {\r\n         setFetchedCountries (await fetchCountries());\r\n       }\r\n       fetchAPI();\r\n    }, [setFetchedCountries])\r\n\r\n   //console.log(fetchCountries);\r\n\r\n    return(\r\n        <FormControl className={styles.formControl}>\r\n          <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n            <option value=\"\">Global</option>\r\n            {fetchedCountries.map((country, i) => <option key={i} value={country }> {country } </option>)}\r\n          </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","// will here create a basic class based component\r\n\r\nimport React, {Component} from 'react';\r\nimport Cards from './components/Cards/Cards';\r\nimport Chart from './components/Chart/Chart';\r\nimport CountryPicker from './components/CountryPicker/CountryPicker';\r\nimport coronaImage from './images/image (1).png';\r\n\r\nimport styles from './App.module.css';\r\nimport {fetchData} from './api';\r\n\r\nclass App extends Component{\r\n    state={\r\n      data:{},\r\n      country: '',\r\n\r\n    }\r\n\r\nasync componentDidMount (){\r\n     const fetchedData = await fetchData();\r\n     console.log(fetchedData);\r\n\r\n     this.setState({data: fetchedData})\r\n }\r\n\r\n //we will pass this method as a prop to the <CountryPicker /> component below\r\n handleCountryChange = async( country ) => {\r\n\r\n  const fetchedData = await fetchData(country);\r\n   \r\n  this.setState({data: fetchedData, country: country})\r\n }\r\n    \r\n  render(){\r\n      return(\r\n        <div className={styles.container}>\r\n        <img className={styles.image} src={coronaImage} alt=\"COVID-19\" />\r\n          <Cards data={this.state.data} />\r\n          <CountryPicker data = {this.state.data} handleCountryChange={this.handleCountryChange}/>\r\n          <Chart data= {this.state.data} country={this.state.country} />\r\n         </div>\r\n      )\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/> , document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__LrRNV\",\"image\":\"App_image__1SD7Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__2PsUo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__32PXG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__36cWK\"};","module.exports = __webpack_public_path__ + \"static/media/image (1).d7265326.png\";"],"sourceRoot":""}